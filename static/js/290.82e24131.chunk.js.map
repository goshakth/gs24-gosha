{"version":3,"file":"static/js/290.82e24131.chunk.js","mappings":"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","sources":["components/ContentBlock/styles.ts","components/ContentBlock/index.tsx"],"sourcesContent":["import { Row } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ContentSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 10rem 0 8rem;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 4rem 0 4rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin: 1.5rem 0 2rem 0;\r\n`;\r\n\r\nexport const StyledRow = styled(Row)`\r\n  flex-direction: ${({ direction }: { direction: string }) =>\r\n    direction === \"left\" ? \"row\" : \"row-reverse\"};\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 540px;\r\n\r\n  @media only screen and (max-width: 575px) {\r\n    padding-top: 4rem;\r\n  }\r\n`;\r\n\r\nexport const ServiceWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n`;\r\n\r\nexport const MinTitle = styled(\"h6\")`\r\n  font-size: 15px;\r\n  line-height: 1rem;\r\n  padding: 0.5rem 0;\r\n  text-transform: uppercase;\r\n  color: #000;\r\n  font-family: \"Motiva Sans Light\", sans-serif;\r\n`;\r\n\r\nexport const MinPara = styled(\"p\")`\r\n  font-size: 13px;\r\n`;\r\n\r\nexport const ButtonWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n\r\n  @media screen and (min-width: 1024px) {\r\n    max-width: 80%;\r\n  }\r\n\r\n  button:last-child {\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n} from \"./styles\";\r\n\r\nconst ContentBlock = ({\r\n  icon,\r\n  title,\r\n  content,\r\n  section,\r\n  button,\r\n  t,\r\n  id,\r\n  direction,\r\n}: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={direction} triggerOnce>\r\n        <StyledRow\r\n          justify=\"space-between\"\r\n          align=\"middle\"\r\n          id={id}\r\n          direction={direction}\r\n        >\r\n          <Col lg={11} md={11} sm={12} xs={24}>\r\n            <SvgIcon src={icon} width=\"100%\" height=\"100%\" />\r\n          </Col>\r\n          <Col lg={11} md={11} sm={11} xs={24}>\r\n            <ContentWrapper>\r\n              <h6>{t(title)}</h6>\r\n              {Array.isArray(content) ? (\r\n              content.map((paragraph, index) => (\r\n                <p key={index}>{t(paragraph)}</p>  // 각 문장을 <p> 태그로 출력\r\n              ))\r\n            ) : (\r\n              <p>{t(content)}</p>  // content가 배열이 아닌 경우 단일 문장으로 출력\r\n            )}\r\n              {direction === \"right\" ? (\r\n                <ButtonWrapper>\r\n                  {typeof button === \"object\" &&\r\n                    button.map(\r\n                      (\r\n                        item: {\r\n                          color?: string;\r\n                          title: string;\r\n                        },\r\n                        id: number\r\n                      ) => {\r\n                        return (\r\n                          <Button\r\n                            key={id}\r\n                            color={item.color}\r\n                            onClick={() => scrollTo(\"about\")}\r\n                          >\r\n                            {t(item.title)}\r\n                          </Button>\r\n                        );\r\n                      }\r\n                    )}\r\n                </ButtonWrapper>\r\n              ) : (\r\n                <ServiceWrapper>\r\n                  <Row justify=\"space-between\">\r\n                  {typeof section === \"object\" &&\r\n                    section.map(\r\n                      (\r\n                        item: {\r\n                          title: string;\r\n                          content: string | string[]; // section의 content도 string[]을 허용하도록 수정\r\n                          icon?: string; // icon을 선택 사항으로 처리\r\n                        },\r\n                        id: number\r\n                      ) => {\r\n                        return (\r\n                          <Col key={id} span={11}>\r\n                            <MinTitle>{t(item.title)}</MinTitle>\r\n                            <MinPara>{t(item.content)}</MinPara>\r\n                          </Col>\r\n                        );\r\n                      }\r\n                    )}\r\n                  </Row>\r\n                </ServiceWrapper>\r\n              )}\r\n            </ContentWrapper>\r\n          </Col>\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(ContentBlock);\r\n"],"names":["ContentSection","styled","_templateObject","_taggedTemplateLiteral","StyledRow","_templateObject2","Row","_templateObject3","_ref","direction","ContentWrapper","_templateObject4","ServiceWrapper","_templateObject5","MinTitle","_templateObject6","MinPara","_templateObject7","ButtonWrapper","_templateObject8","withTranslation","icon","title","content","section","button","t","id","_jsx","children","Fade","triggerOnce","_jsxs","justify","align","Col","lg","md","sm","xs","SvgIcon","src","width","height","Array","isArray","map","paragraph","index","item","Button","color","onClick","document","getElementById","scrollIntoView","behavior","scrollTo","span"],"sourceRoot":""}